{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "NftMarketplace__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__Nftalreadylisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__Nftnotapprovedforlisting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__Nftnotlisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__PriceMustBeAbove0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__notowner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousowner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "ItemUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newprice",
          "type": "uint256"
        }
      ],
      "name": "ItemUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "cancelItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "getlisting",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getproceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newprice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22b0acd8d3d893d0bd7d6c8c1c4c248560b5db0c5c806902f50ad632aff1c7dc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1272604",
    "logsBloom": "0x
    "blockHash": "0x3d31a5ecd14b330c8a13b969df2ec579de3be73cd20ca958feeb1207036caab5",
    "transactionHash": "0x22b0acd8d3d893d0bd7d6c8c1c4c248560b5db0c5c806902f50ad632aff1c7dc",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1272604",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0093b793ba96de8b10995abf8e633133",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NftMarketplace__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__Nftalreadylisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__Nftnotapprovedforlisting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__Nftnotlisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__PriceMustBeAbove0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__notowner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"ItemUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"cancelItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getlisting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getproceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nftmarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Nftmarketplace.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\npragma solidity ^0.8.7;\\n\\ncontract NftMarketplace is ReentrancyGuard {\\n    struct Listing {\\n        uint256 price;\\n        address seller;\\n    }\\n    mapping(address => mapping(uint256 => Listing)) private s_listing;\\n    mapping(address => uint256) private s_proceeds;\\n    error NftMarketplace__PriceMustBeAbove0();\\n    error NftMarketplace__Nftnotapprovedforlisting();\\n    error NftMarketplace__Nftalreadylisted();\\n    error NftMarketplace__Nftnotlisted();\\n    error NftMarketplace__InsufficientAmount();\\n    error NftMarketplace__TransferFailed();\\n    error NftMarketplace__notowner();\\n    event ItemListed(\\n        uint256 tokenid,\\n        uint256 price,\\n        address owner,\\n        address nftaddress\\n    );\\n    event ItemBought(\\n        uint256 tokenid,\\n        uint256 price,\\n        address indexed owner,\\n        address indexed previousowner,\\n        address nftaddress\\n    );\\n    event ItemUnlisted(address owner, address nftaddress, uint256 tokenid);\\n    event ItemUpdated(\\n        address owner,\\n        address nftaddress,\\n        uint256 tokenid,\\n        uint256 newprice\\n    );\\n\\n    modifier islisted(uint256 tokenid, address nftaddress) {\\n        Listing memory listing = s_listing[nftaddress][tokenid];\\n        if (listing.price <= 0) {\\n            revert NftMarketplace__Nftnotlisted();\\n        }\\n        _;\\n    }\\n\\n    modifier notlisted(uint256 tokenid, address nftaddress) {\\n        Listing memory listing = s_listing[nftaddress][tokenid];\\n        if (listing.price > 0) {\\n            revert NftMarketplace__Nftalreadylisted();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner(uint256 tokenid, address nftaddress) {\\n        IERC721 nft = IERC721(nftaddress);\\n        if (msg.sender != nft.ownerOf(tokenid)) {\\n            revert NftMarketplace__notowner();\\n        }\\n        _;\\n    }\\n\\n    function listItem(\\n        address nftaddress,\\n        uint256 tokenid,\\n        uint256 price\\n    ) external notlisted(tokenid, nftaddress) onlyOwner(tokenid, nftaddress) {\\n        if (price <= 0) {\\n            revert NftMarketplace__PriceMustBeAbove0();\\n        }\\n        IERC721 nft = IERC721(nftaddress);\\n        if (nft.getApproved(tokenid) != address(this)) {\\n            revert NftMarketplace__Nftnotapprovedforlisting();\\n        }\\n        s_listing[nftaddress][tokenid] = Listing(price, msg.sender);\\n        emit ItemListed(tokenid, price, msg.sender, nftaddress);\\n    }\\n\\n    function buyItem(\\n        address nftaddress,\\n        uint256 tokenid\\n    ) external payable islisted(tokenid, nftaddress) nonReentrant {\\n        Listing memory listing = s_listing[nftaddress][tokenid];\\n        if (msg.value < listing.price) {\\n            revert NftMarketplace__InsufficientAmount();\\n        }\\n        s_proceeds[listing.seller] = s_proceeds[listing.seller] + msg.value;\\n        delete s_listing[nftaddress][tokenid];\\n        IERC721 nft = IERC721(nftaddress);\\n        nft.safeTransferFrom(listing.seller, msg.sender, tokenid);\\n        emit ItemBought(\\n            tokenid,\\n            listing.price,\\n            msg.sender,\\n            listing.seller,\\n            nftaddress\\n        );\\n    }\\n\\n    function cancelItem(\\n        address nftaddress,\\n        uint256 tokenid\\n    ) external islisted(tokenid, nftaddress) onlyOwner(tokenid, nftaddress) {\\n        delete s_listing[nftaddress][tokenid];\\n        emit ItemUnlisted(msg.sender, nftaddress, tokenid);\\n    }\\n\\n    function updateListing(\\n        address nftaddress,\\n        uint256 tokenid,\\n        uint256 newprice\\n    ) external islisted(tokenid, nftaddress) onlyOwner(tokenid, nftaddress) {\\n        s_listing[nftaddress][tokenid].price = newprice;\\n        emit ItemUpdated(msg.sender, nftaddress, tokenid, newprice);\\n    }\\n\\n    function withdrawProceeds() external payable {\\n        uint256 userproceeds = s_proceeds[msg.sender];\\n        s_proceeds[msg.sender] = 0;\\n        if (userproceeds <= 0) {\\n            revert NftMarketplace__InsufficientAmount();\\n        }\\n        (bool success, ) = msg.sender.call{value: userproceeds}(\\\"\\\");\\n        if (!success) {\\n            revert NftMarketplace__TransferFailed();\\n        }\\n    }\\n\\n    //Getters\\n    function getlisting(\\n        address nftaddress,\\n        uint256 tokenid\\n    ) external view returns (Listing memory) {\\n        return s_listing[nftaddress][tokenid];\\n    }\\n\\n    function getproceeds() external view returns (uint256) {\\n        return s_proceeds[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0xdbf52da357c7853d664ec3ecde6b79a446eb9c44abc7ed20bfb47adf20ad70db\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506115bf806100286000396000f3fe6080604052600436106100705760003560e01c80638f6d40d21161004e5780638f6d40d2146101065780639038e6931461012f5780639f37092a14610139578063f772adf11461015557610070565b806344837757146100755780636bb9b6a4146100b257806389bfd38f146100dd575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611272565b61017e565b6040516100a991906112ff565b60405180910390f35b3480156100be57600080fd5b506100c7610249565b6040516100d49190611329565b60405180910390f35b3480156100e957600080fd5b5061010460048036038101906100ff9190611344565b610290565b005b34801561011257600080fd5b5061012d60048036038101906101289190611272565b6106aa565b005b610137610955565b005b610153600480360381019061014e9190611272565b610abf565b005b34801561016157600080fd5b5061017c60048036038101906101779190611344565b610ed5565b005b6101866111a9565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b81836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610390576040517f72e6cfad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848660008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016103d09190611329565b602060405180830381865afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041191906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610475576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087116104af576040517fb7d3468200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8b6040518263ffffffff1660e01b81526004016105049190611329565b602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906113ac565b73ffffffffffffffffffffffffffffffffffffffff1614610592576040517f5e82a49600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808981526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fe746a1ab44bfdd100ad8ba5961062a27464175181c3aa9249679bcc4b870a2ff8989338d60405161069694939291906113e8565b60405180910390a150505050505050505050565b80826000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116107a9576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838560008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016107e99190611329565b602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a91906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088e576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f631ff2b3e2fb009faba68797b6ac1b613cb81ff798f33528160ab263d051ea683389896040516109439392919061142d565b60405180910390a15050505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008111610a18576040517f896dc38700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1682604051610a3e90611495565b60006040518083038185875af1925050503d8060008114610a7b576040519150601f19603f3d011682016040523d82523d6000602084013e610a80565b606091505b5050905080610abb576040517fa05884ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b80826000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610bbe576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc6611159565b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610cc3576040517f896dc38700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1291906114d9565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505060008690508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836020015133896040518463ffffffff1660e01b8152600401610e219392919061142d565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b50505050816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1c78c1aff223a76b6949dfb31a366668665a47b9a95712e9c9dc2a4a09e5985c8885600001518b604051610ebc9392919061150d565b60405180910390a35050610ece61119f565b5050505050565b81836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610fd4576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848660008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110149190611329565b602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b9576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600001819055507f3c33e65e8698294810b631d476d60b44425303828da0b1f8b635231bfda12be2338a8a8a6040516111469493929190611544565b60405180910390a1505050505050505050565b600260005403611195576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611209826111de565b9050919050565b611219816111fe565b811461122457600080fd5b50565b60008135905061123681611210565b92915050565b6000819050919050565b61124f8161123c565b811461125a57600080fd5b50565b60008135905061126c81611246565b92915050565b60008060408385031215611289576112886111d9565b5b600061129785828601611227565b92505060206112a88582860161125d565b9150509250929050565b6112bb8161123c565b82525050565b6112ca816111fe565b82525050565b6040820160008201516112e660008501826112b2565b5060208201516112f960208501826112c1565b50505050565b600060408201905061131460008301846112d0565b92915050565b6113238161123c565b82525050565b600060208201905061133e600083018461131a565b92915050565b60008060006060848603121561135d5761135c6111d9565b5b600061136b86828701611227565b935050602061137c8682870161125d565b925050604061138d8682870161125d565b9150509250925092565b6000815190506113a681611210565b92915050565b6000602082840312156113c2576113c16111d9565b5b60006113d084828501611397565b91505092915050565b6113e2816111fe565b82525050565b60006080820190506113fd600083018761131a565b61140a602083018661131a565b61141760408301856113d9565b61142460608301846113d9565b95945050505050565b600060608201905061144260008301866113d9565b61144f60208301856113d9565b61145c604083018461131a565b949350505050565b600081905092915050565b50565b600061147f600083611464565b915061148a8261146f565b600082019050919050565b60006114a082611472565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114e48261123c565b91506114ef8361123c565b9250828201905080821115611507576115066114aa565b5b92915050565b6000606082019050611522600083018661131a565b61152f602083018561131a565b61153c60408301846113d9565b949350505050565b600060808201905061155960008301876113d9565b61156660208301866113d9565b611573604083018561131a565b611580606083018461131a565b9594505050505056fea2646970667358221220c09f5e4a1be5cb487022c1677b4a8461982d872e633045a3077ff5b9a98be8c464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80638f6d40d21161004e5780638f6d40d2146101065780639038e6931461012f5780639f37092a14610139578063f772adf11461015557610070565b806344837757146100755780636bb9b6a4146100b257806389bfd38f146100dd575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611272565b61017e565b6040516100a991906112ff565b60405180910390f35b3480156100be57600080fd5b506100c7610249565b6040516100d49190611329565b60405180910390f35b3480156100e957600080fd5b5061010460048036038101906100ff9190611344565b610290565b005b34801561011257600080fd5b5061012d60048036038101906101289190611272565b6106aa565b005b610137610955565b005b610153600480360381019061014e9190611272565b610abf565b005b34801561016157600080fd5b5061017c60048036038101906101779190611344565b610ed5565b005b6101866111a9565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b81836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610390576040517f72e6cfad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848660008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016103d09190611329565b602060405180830381865afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041191906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610475576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087116104af576040517fb7d3468200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8b6040518263ffffffff1660e01b81526004016105049190611329565b602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906113ac565b73ffffffffffffffffffffffffffffffffffffffff1614610592576040517f5e82a49600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808981526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fe746a1ab44bfdd100ad8ba5961062a27464175181c3aa9249679bcc4b870a2ff8989338d60405161069694939291906113e8565b60405180910390a150505050505050505050565b80826000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116107a9576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838560008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016107e99190611329565b602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a91906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088e576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f631ff2b3e2fb009faba68797b6ac1b613cb81ff798f33528160ab263d051ea683389896040516109439392919061142d565b60405180910390a15050505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008111610a18576040517f896dc38700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1682604051610a3e90611495565b60006040518083038185875af1925050503d8060008114610a7b576040519150601f19603f3d011682016040523d82523d6000602084013e610a80565b606091505b5050905080610abb576040517fa05884ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b80826000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610bbe576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc6611159565b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610cc3576040517f896dc38700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d1291906114d9565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505060008690508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836020015133896040518463ffffffff1660e01b8152600401610e219392919061142d565b600060405180830381600087803b158015610e3b57600080fd5b505af1158015610e4f573d6000803e3d6000fd5b50505050816020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1c78c1aff223a76b6949dfb31a366668665a47b9a95712e9c9dc2a4a09e5985c8885600001518b604051610ebc9392919061150d565b60405180910390a35050610ece61119f565b5050505050565b81836000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610fd4576040517fdd5cae6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b848660008190508073ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110149190611329565b602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906113ac565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b9576040517fe3dae0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600001819055507f3c33e65e8698294810b631d476d60b44425303828da0b1f8b635231bfda12be2338a8a8a6040516111469493929190611544565b60405180910390a1505050505050505050565b600260005403611195576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611209826111de565b9050919050565b611219816111fe565b811461122457600080fd5b50565b60008135905061123681611210565b92915050565b6000819050919050565b61124f8161123c565b811461125a57600080fd5b50565b60008135905061126c81611246565b92915050565b60008060408385031215611289576112886111d9565b5b600061129785828601611227565b92505060206112a88582860161125d565b9150509250929050565b6112bb8161123c565b82525050565b6112ca816111fe565b82525050565b6040820160008201516112e660008501826112b2565b5060208201516112f960208501826112c1565b50505050565b600060408201905061131460008301846112d0565b92915050565b6113238161123c565b82525050565b600060208201905061133e600083018461131a565b92915050565b60008060006060848603121561135d5761135c6111d9565b5b600061136b86828701611227565b935050602061137c8682870161125d565b925050604061138d8682870161125d565b9150509250925092565b6000815190506113a681611210565b92915050565b6000602082840312156113c2576113c16111d9565b5b60006113d084828501611397565b91505092915050565b6113e2816111fe565b82525050565b60006080820190506113fd600083018761131a565b61140a602083018661131a565b61141760408301856113d9565b61142460608301846113d9565b95945050505050565b600060608201905061144260008301866113d9565b61144f60208301856113d9565b61145c604083018461131a565b949350505050565b600081905092915050565b50565b600061147f600083611464565b915061148a8261146f565b600082019050919050565b60006114a082611472565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114e48261123c565b91506114ef8361123c565b9250828201905080821115611507576115066114aa565b5b92915050565b6000606082019050611522600083018661131a565b61152f602083018561131a565b61153c60408301846113d9565b949350505050565b600060808201905061155960008301876113d9565b61156660208301866113d9565b611573604083018561131a565b611580606083018461131a565b9594505050505056fea2646970667358221220c09f5e4a1be5cb487022c1677b4a8461982d872e633045a3077ff5b9a98be8c464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 127,
        "contract": "contracts/Nftmarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 215,
        "contract": "contracts/Nftmarketplace.sol:NftMarketplace",
        "label": "s_listing",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)208_storage))"
      },
      {
        "astId": 219,
        "contract": "contracts/Nftmarketplace.sol:NftMarketplace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)208_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)208_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)208_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)208_storage"
      },
      "t_struct(Listing)208_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Listing",
        "members": [
          {
            "astId": 205,
            "contract": "contracts/Nftmarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/Nftmarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}